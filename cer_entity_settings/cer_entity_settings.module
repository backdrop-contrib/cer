<?php

/**
 * Implements hook_entity_delete().
 */
function cer_entity_settings_entity_delete($entity, $type) {
  list ($id, ,) = entity_extract_IDs($type, $entity);

  db_delete('cer_entity_settings')->condition('entity_type', $type)->condition('entity_id', $id)->execute();
}

/**
 * Implements hook_field_delete_instance().
 */
function cer_entity_settings_field_delete_instance(array $instance) {
  db_delete('cer_entity_settings')->condition('fiid', $instance['id'])->execute();
}

/**
 * Implements hook_permission().
 */
function cer_entity_settings_permission() {
  return array(
    'override cer settings' => array(
      'title' => t('Override corresponding references'),
      'description' => t('Allows the user to set corresponding reference settings for individual entities.'),
    ),
  );
}

/**
 * Implements hook_field_widget_form_alter().
 */
function cer_entity_settings_field_widget_form_alter(array &$element, array &$form_state, array $context) {
  // Don't do anything if the user hasn't got permission.
  if (! user_access('override cer settings')) {
    return;
  }
  
  // If there's no entity mentioned in the form (e.g., on the field instance's
  // settings form), bail out here.
  if (! isset($context['form']['#entity'])) {
    return;
  }

  $entity_type = $context['instance']['entity_type'];
  $entity = new EntityDrupalWrapper($entity_type, $context['form']['#entity']);

  // Read settings in the database.
  $settings = db_select('cer_entity_settings', 'ces')
    ->fields('ces', array(
      'pid', 'status',
    ))
    ->condition('entity_type', $entity_type)
    ->condition('entity_id', $entity->getIdentifier())
    ->condition('fiid', $context['instance']['id'])
    ->execute()
    ->fetchAllKeyed();

  $identifier = "{$entity_type}:" . $context['instance']['bundle'] . ':' . $context['field']['field_name'];
  $info = CerField::getPluginInfo($identifier);
  if ($info) {
    $presets = _cer_filter_presets($entity->cer->lineage->value() . $context['field']['field_name']);

    if ($presets) {
      $element['cer'] = array(
        '#type' => 'checkboxes',
        '#title' => t('Correspond %label with...', array('%label' => $context['instance']['label'])),
        '#parents' => array(
          'cer',
          $context['instance']['id'],
        ),
      );

      foreach ($presets as $id => $preset) {
        $element['cer']['#options'][$id] = $preset->right->getLabel();
        
        // By default, the preset is enabled...
        $element['cer']['#default_value'][] = $id;

        // ...and should only be disabled if it's been specifically turned off.
        if (isset($settings[$id]) && empty($settings[$id])) {
          $index = array_search($id, $element['cer']['#default_value']);
          unset($element['cer']['#default_value'][$index]);
        }
      }

      $element['cer']['#options']['preserve'] = t('Remember these settings');

      // If there were settings stored in the database, let's assume the user wants
      // to continue preserving their settings.
      if ($settings) {
        $element['cer']['#default_value'][] = 'preserve';
      }
    }
  }
}

/**
 * Implements hook_entity_presave().
 */
function cer_entity_settings_entity_presave($entity, $type) {
  list($id, ,) = entity_extract_IDs($type, $entity);
  
  // The list of preset IDs to be used by our implementations of hook_cer_entity_*
  $cer = array();

  // We expect an array of checkbox values, keyed by field instance ID.
  if (isset($entity->cer)) {
    // Delete the previous settings for this entity.
    db_delete('cer_entity_settings')->condition('entity_type', $type)->condition('entity_id', $id)->execute();

    // If any settings are preserved, the database records will go in here.
    $records = array();

    foreach ($entity->cer as $fiid => $settings) {
      foreach ($settings as $key => $value) {
        if ($key != 'preserve') {
          // If we're keeping the settings for this field instance, create a record
          // of this preset's status for this instance on this entity.
          if ($settings['preserve']) {
            $records[] = array(
              'pid' => $key,
              'entity_type' => $type,
              'entity_id' => $id,
              'fiid' => $fiid,
              'status' => (boolean) $value,
            );
          }

          // If the preset is enabled, add it to the list of presets to use.
          if ($value) {
            $cer[] = $value;
          }
        }
      }
    }

    foreach ($records as $record) {
      drupal_write_record('cer_entity_settings', $record);
    }
  }

  // All we'll need from here on out are the preset IDs.
  $entity->cer = $cer;
}
