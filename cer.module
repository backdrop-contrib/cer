<?php
/**
 * @file
 * Module file providing the "corresponding entity reference" module main
 * functions.
 */

/**
 * Implements hook_menu().
 */
function cer_menu() {
  $items = array();

  $items['admin/config/system/cer'] = array(
    'title' => 'Corresponding entity references',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cer_settings_form'),
    'access arguments' => array('administer cer settings'),
    'file' => 'cer.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/system/cer/references'] = array(
    'title' => 'References',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cer_settings_form'),
    'access arguments' => array('administer cer settings'),
    'file' => 'cer.admin.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/config/system/cer/update'] = array(
    'title' => 'Update existing entities',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cer_update_form'),
    'access arguments' => array('administer cer settings'),
    'file' => 'cer.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function cer_permission() {
  return array(
    'administer cer settings' => array(
      'title' => t('Administer corresponding entity reference settings'),
    )
  );
}

/**
 * Implements hook_help().
 */
function cer_help($path, $arg) {
  $output = '';
  if ($path == 'admin/config/system/cer') {
    $output .= t('Check which entity references should listen to each other. When checking a check box a reference on entity type A to entity B will automatically update the entity reference field on entity B adding an entry which points to entity A.');
  }
  elseif ($path == 'admin/config/system/cer/update') {
    $output .= t('This will update all the existing entities for the selected content types so that their entity reference fields are in sync.');
    $output .= '<br />';
    $output .= t('This process may take a long time depending on the number of entities you are updating.');
    $output .= '<br /><br />';
    $output .= t('When the process is finished you will see a count of the number of entities that were updated.');
  }
  return $output;
}

/**
 * Implements hook_theme().
 */
function cer_theme() {
  return array(
    'cer_label' => array(
      'variables' => array('key' => ''),
    ),
  );
}

function theme_cer_label($variables) {
  $key = explode(' ', $variables['key']);
  
  $local = field_info_instance($key[0], $key[2], $key[1]);
  $remote = field_info_instance($key[3], $key[5], $key[4]);

  $message = 'Correspond <span title="!local_field">%local_label</span> on !local_entity(s) of type %local_bundle with <span title="!remote_field">%remote_label</span> on !remote_entity(s) of type %remote_bundle.';

  $variables = array(
    '%local_label' => $local['label'],
    '!local_field' => $local['field_name'],
    '!local_entity' => $local['entity_type'],
    '%local_bundle' => $local['bundle'],
    '%remote_label' => $remote['label'],
    '!remote_field' => $remote['field_name'],
    '!remote_entity' => $remote['entity_type'],
    '%remote_bundle' => $remote['bundle'],
  );

  return t($message, $variables);
}

/**
 * Implements hook_entity_insert().
 */
function cer_entity_insert($entity, $type) {
  cer_processing_entity('insert', $entity, $type);
}

/**
 * Implements hook_entity_update().
 */
function cer_entity_update($entity, $type) {
  cer_processing_entity('update', $entity, $type);
}

/**
 * Implements hook_entity_delete().
 */
function cer_entity_delete($entity, $type) {
  cer_processing_entity('delete', $entity, $type);
}

/**
 * Load enabled CNR presets.
 */
function cer_preset_load_enabled() {
  ctools_include('export');
  return ctools_export_load_object('cer', 'conditions', array('enabled' => 1));
}

/**
 * Return CNR preset by key.
 */
function cer_preset_load($key) {
  ctools_include('export');
  return ctools_export_crud_load('cer', $key);
}

/**
 * Return 1 if CNR preset specified by given key is enabled.
 */
function cer_preset_enabled($key) {
  $preset = cer_preset_load($key);
  return empty($preset) ? 0 : $preset->enabled;
}

/**
 * Process a entity's corresponding entity references.
 *
 * @param $op the operation being performed on the entity.
 * @param $entity the entity object
 */
function cer_processing_entity($op, $entity, $entity_type) {
  // If the entity is of the wrong type, entity_extract_IDs() will throw
  // EntityMalformedException and rightfully bail out here.
  list (, , $bundle) = entity_extract_IDs($entity_type, $entity);

  $result = cer_preset_load_enabled();

  foreach ($result as $row) {
    $keys = explode('*', $row->entity_types_content_fields);

    if ($keys[0] == $entity_type && $keys[1] == $bundle) {
      $handler = new CerHandler($row->entity_types_content_fields, $entity);
      call_user_func(array($handler, $op));
    }

    if ($keys[3] == $entity_type && $keys[4] == $bundle) {
      $preset = implode('*', array($keys[3], $keys[4], $keys[5], $keys[0], $keys[1], $keys[2]));
      $handler = new CerHandler($preset, $entity);
      call_user_func(array($handler, $op));
    }
  }
}

/**
 * Submit a batch job to index the remaining, unindexed content.
 */
function cer_batch_index_remaining($type, $limit) {
  $batch = array(
    'operations' => array(
      array(
        'cer_batch_update_existing_entities', array($type, $limit)
      ),
    ),
    'finished' => 'cer_batch_update_existing_finished',
    'title' => t('Processing'),
    'init_message' => t('Preparing to update corresponding entity references for existing entities...'),
    'progress_message' => t('Processing entities...'),
    'error_message' => t('Corresponding entity references - existing entity update has encountered an error.'),
  );
  batch_set($batch);
}

/**
 * Batch Operation Callback
 *
 * @see cer_batch_index_remaining()
 */
function cer_batch_update_existing_entities($type, $limit, &$context) {
  // If we are on our first time through.
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_entity'] = 0;
    $count = 0;


    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', $type)
          ->entityCondition('entity_id', 0, '>')
          ->addMetaData('account', user_load(1)); // Run the query as user 1.

    $result = $query->execute();
    if (isset($result[$type])) {
      $ids = array_keys($result[$type]);
      $count += count($ids);
    }
    $context['sandbox']['max'] = $count;
  }

  $ids = array();
  $args = $type;
  $args['current_entity'] = $context['sandbox']['current_entity'];

  $labels = _cer_entity_ids();
  $label = $labels[$type];

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', $type)
        ->entityCondition('entity_id', $args['current_entity'], '>')
        ->propertyOrderBy($label, 'ASC')
        ->range(0, $limit)
        ->addMetaData('account', user_load(1)); // Run the query as user 1.

  $result = $query->execute();
  if (isset($result[$type])) {
    $ids = array_keys($result[$type]);
  }

  foreach ($ids as $id){
      $entity = entity_load($type, array($id));
      $entity = $entity[$id];
      cer_processing_entity('update', $entity, $type, TRUE);
      // Update our progress information.
      $context['sandbox']['progress']++;
      $context['sandbox']['current_entity'] = $entity->{$label};
      $context['message'] = t('Processed @current of @total entities',
                               array(
                                 '@current' => $context['sandbox']['progress'],
                                 '@total' => $context['sandbox']['max'],
                               )
                             );

  }
  // Inform the batch engine that we are not finished,
  // and provide an estimation of the completion level we reached.
  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
  // Put the total into the results section when we're finished so we can show
  // it to the admin.
  if ($context['finished']) {
    $context['results']['count'] = $context['sandbox']['progress'];
  }
}

/**
 * Batch 'finished' callback.
 *
 * @see cer_batch_index_remaining()
 */
function cer_batch_update_existing_finished($success, $results, $operations) {
  if ($success) {
    $type = 'status';
    $message = format_plural($results['count'], '1 entity processed successfully.', '@count entitys processed successfully.');
  }
  else {
    $type = 'error';
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    $message = 'An error occurred while processing ' . $error_operation[0] . ' with arguments:' . print_r($error_operation[0], TRUE);
  }
  drupal_set_message($message, $type);
}

/**
 * Implements hook_ctools_plugin_api().
 */
function cer_ctools_plugin_api($owner, $api) {
  if ($owner == 'cer' && $api == 'default_cer_presets') {
    return array('version' => 1);
  }
}

/**
 * Helper function. Returns entity "ID" keys.
 *
 * @param $entity_types Array containing "home" and "away" keys.
 */
function _cer_entity_ids($entity_types = NULL) {
  $types = entity_get_info();
  foreach($types as $key => $type){
    $entity_type_ids[$key] = $type['entity keys']['id'];
  }
  if (isset($entity_types)){
    $ids = array(
      'home' => $entity_type_ids[$entity_types['home']],
      'away' => $entity_type_ids[$entity_types['away']],
    );
    return $ids;
  }
  else {
    return $entity_type_ids;
  }
}

/**
 * Update field data.
 *
 * @param $node the referenced node to be updated.
 */
function _cer_update($entity_type, $entity) {
  field_attach_presave($entity_type, $entity);
  field_attach_update($entity_type, $entity);
}
