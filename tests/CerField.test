<?php

class CerFieldUnitTest extends DrupalWebTestCase {

  public static function getInfo() {
    return [
      'name' =>
        'CerField',
      'group' =>
        'CER',
      'description' =>
        'Unit tests the CerField class.',
    ];
  }

  public function setUp() {
    parent::setUp('ctools', 'entity', 'field_collection', 'entityreference', 'cer');

    field_create_field([
      'type' =>
        'entityreference',
      'field_name' =>
        'field_ref',
      'cardinality' =>
        1,
      'settings' => [
        'target_type' => 'node',
      ],
    ]);

    field_create_instance([
      'entity_type' =>
        'node',
      'bundle' =>
        'page',
      'field_name' =>
        'field_ref',
      'label' =>
        'Reference',
    ]);

    field_create_field([
      'type' =>
        'field_collection',
      'field_name' =>
        'field_collection',
      'cardinality' =>
        1,
    ]);

    field_create_instance([
      'entity_type' =>
        'node',
      'bundle' =>
        'page',
      'field_name' =>
        'field_collection',
      'label' =>
        'Collection',
    ]);

    field_create_instance([
      'entity_type' =>
        'field_collection_item',
      'bundle' =>
        'field_collection',
      'field_name' =>
        'field_ref',
      'label' =>
        'Reference',
    ]);
  }

  public function test() {
    $field = new CerEntityReferenceField('node', 'page', 'field_ref');

    $node = new EntityDrupalWrapper('node', $this->drupalCreateNode(['type' => 'page']));
    $handler = $field->getHandler($node);
    $this->assertTrue($handler instanceof CerFieldHandler, 'getHandler() returns CerFieldHandler.');

    $this->assertIdentical($field->__toString(), 'node:page:field_ref', '__toString() returns expected identifier.');
    $this->assertFalse($field->inFieldCollection(), 'inFieldCollection() returns false for non-embedded field.');
    $this->assertIdentical($field->fieldTypeInfo(), field_info_field_types('entityreference'), 'fieldTypeInfo() returns field type definition.');
    $this->assertIdentical($field->entityInfo(), entity_get_info('node'), 'entityInfo() returns instance entity type info.');
    $this->assertIdentical($field->fieldInfo(), field_info_field('field_ref'), 'fieldInfo() returns field definition.');
    $this->assertIdentical($field->instanceInfo(), field_info_instance('node', 'field_ref', 'page'), 'instanceInfo() returns instance definition.');
    $this->assertIdentical($field->getLabel(), 'Node &raquo; Basic page &raquo; Reference', 'getLabel() returns expected field label for non-embedded field.');

    $field = new CerEntityReferenceField('field_collection_item', 'field_collection', 'field_ref');
    $field_collection = new CerFieldCollectionField('node', 'page', 'field_collection');
    $field_collection->child($field)->parent($field_collection);

    $this->assertTrue($field->inFieldCollection(), 'inFieldCollection() returns true for embedded field.');
    $this->assertIdentical($field->getLabel(), 'Reference', 'getLabel() returns expected field label for embedded field.');
  }

}
