<?php

class CerBasicTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Basic',
      'group' => 'CER',
      'description' => "Tests CER's basic CRUD functionality.",
    );
  }

  public function setUp() {
    parent::setUp('ctools', 'entity', 'entityreference', 'cer', 'features', 'cer_tests');
  }

  /**
   * Tests that a reciprocal reference is created when an entity is created.
   */
  public function testCreate() {
    $author = $this->drupalCreateUser();
    $node = array(
      'type' => 'page',
      'field_author' => array(
        LANGUAGE_NONE => array(
          array('target_id' => $author->uid),
        )
      ),
    );
    $node = $this->drupalCreateNode($node);

    $author = user_load($author->uid, TRUE);
    $this->assertTrue(isset($author->field_my_pages[LANGUAGE_NONE][0]['target_id']));
    $this->assertEqual($node->nid, $author->field_my_pages[LANGUAGE_NONE][0]['target_id']);
  }

  /**
   * Tests that reciprocal references are updated when an entity is changed.
   */
  public function testUpdate() {
    $node = $this->drupalCreateNode(array('type' => 'page'));

    $author = $this->drupalCreateUser();
    $author->field_my_pages[LANGUAGE_NONE][0]['target_id'] = $node->nid;
    user_save($author);

    $node = node_load($node->nid, NULL, TRUE);
    $this->assertTrue(isset($node->field_author[LANGUAGE_NONE][0]['target_id']));
    $this->assertEqual($author->uid, $node->field_author[LANGUAGE_NONE][0]['target_id']);
  }

  /**
   * Tests that reciprocal references are cleared when an entity is deleted.
   */
  public function testDelete() {
    $author = $this->drupalCreateUser();
    $node = array(
      'type' => 'page',
      'field_author' => array(
        LANGUAGE_NONE => array(
          array('target_id' => $author->uid),
        ),
      ),
    );
    $node = $this->drupalCreateNode($node);

    $author = user_load($author->uid, TRUE);
    $this->assertTrue(isset($author->field_my_pages[LANGUAGE_NONE][0]['target_id']));
    node_delete($node->nid);
    $author = user_load($author->uid, TRUE);
    $this->assertTrue(empty($author->field_my_pages));
  }

}
